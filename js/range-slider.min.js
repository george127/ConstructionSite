(() => {
    "use strict";

    var sliders = document.getElementsByClassName("r-slider");

    Array.from(sliders).forEach((slider, index) => {
        var circle = document.createElement("div"),
            cloud = document.createElement("div"),
            cloudMoving = document.createElement("div"),
            cloudLeft = document.createElement("div"),
            cloudRight = document.createElement("div"),
            filledLine = document.createElement("div"),
            event = new CustomEvent("r-slider-updated", { detail: { value: null } });

        slider.insertAdjacentElement("afterbegin", circle);
        circle.classList.add("r-slider__circle");

        circle.insertAdjacentElement("afterbegin", cloud);
        cloud.classList.add("r-slider__cloud", "r-slider__cloud_moving", "r-slider_hidden");

        var steps = slider.dataset.steps ? JSON.parse(slider.dataset.steps).filter(step => typeof step === "number" || typeof step === "string") : null;

        var values = steps ? steps : (() => {
            var min = parseInt(slider.dataset.min) || 0,
                max = parseInt(slider.dataset.max) || 500,
                step = parseInt(slider.dataset.step) || 1,
                range = [];

            for (var i = min; i <= max; i += step) {
                range.push(i);
            }

            return range;
        })();

        var getCircleWidth = () => circle.getBoundingClientRect().width,
            getCircleBorderWidth = () => parseFloat(window.getComputedStyle(circle)["border-width"]),
            getCloudWidth = () => cloud.getBoundingClientRect().width,
            getMovingDistance = () => (slider.getBoundingClientRect().width - getCircleWidth()) / (values.length - 1);

        var moving = false,
            currentIndex = parseInt(slider.dataset.startIndex) || 0,
            lastValue = null;

        function updateCurrentIndex(clientX) {
            currentIndex = Math.round((clientX - slider.getBoundingClientRect().left - getCircleWidth() / 2) / getMovingDistance());
            if (currentIndex < 0) currentIndex = 0;
            if (currentIndex >= values.length) currentIndex = values.length - 1;
        }

        function updateSlider(emitEvent = false) {
            var movingDistance = getMovingDistance() * currentIndex;
            circle.style.left = movingDistance + "px";
            filledLine.style.width = movingDistance + getCircleWidth() / 2 + "px";
            cloudMoving.style.left = - (getCircleBorderWidth() + getCloudWidth() / 2 - getCircleWidth() / 2) + "px";

            cloud.innerHTML = formatValue(values[currentIndex]);

            if (emitEvent || lastValue !== values[currentIndex]) {
                event.detail.value = values[currentIndex];
                slider.dispatchEvent(event);
                lastValue = values[currentIndex];
            }
        }

        function formatValue(value) {
            return isNaN(+value) ? value : value.toLocaleString("en-US");
        }

        slider.insertAdjacentElement("afterbegin", cloudLeft);
        cloudLeft.classList.add("r-slider__cloud", "r-slider__cloud_left");
        slider.insertAdjacentElement("beforeend", cloudRight);
        cloudRight.classList.add("r-slider__cloud", "r-slider__cloud_right");
        slider.insertAdjacentElement("beforeend", filledLine);
        filledLine.classList.add("r-slider__filled-line");

        cloud.style.visibility = "visible";
        cloudLeft.innerHTML = formatValue(values[0]);
        cloudRight.innerHTML = formatValue(values[values.length - 1]);

        circle.addEventListener("mousedown", () => { moving = true; });
        document.addEventListener("mouseup", () => { moving = false; });
        document.addEventListener("mousemove", (e) => { if (moving) { updateCurrentIndex(e.clientX); updateSlider(); } });

        circle.addEventListener("touchstart", () => { moving = true; });
        document.addEventListener("touchend", () => { moving = false; });
        document.addEventListener("touchmove", (e) => { if (moving) { updateCurrentIndex(e.touches[0].clientX); updateSlider(); } });

        window.addEventListener("resize", () => { updateSlider(true); });

        slider.addEventListener("click", (e) => { updateCurrentIndex(e.clientX); updateSlider(); });

        updateSlider();
    });
})();
